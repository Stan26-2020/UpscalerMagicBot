import os
import cv2
import numpy as np
from io import BytesIO
from PIL import Image, ImageEnhance
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

TOKEN = os.getenv('TELEGRAM_TOKEN')

async def start(update: Update, context):
    await update.message.reply_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —É–ª—É—á—à—É –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ!\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG/PNG –¥–æ 10MB."
    )

def enhance_image(input_path):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é PIL –∏ OpenCV"""
    img = Image.open(input_path)
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
    enhancer = ImageEnhance.Sharpness(img)
    img = enhancer.enhance(2.0)
    
    # –£–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
    enhancer = ImageEnhance.Color(img)
    img = enhancer.enhance(1.2)
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (2x) —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
    width, height = img.size
    img = img.resize((width*2, height*2), Image.LANCZOS)
    
    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —à—É–º–æ–≤ —á–µ—Ä–µ–∑ OpenCV
    cv_img = np.array(img)
    cv_img = cv2.fastNlMeansDenoisingColored(cv_img, None, 10, 10, 7, 21)
    
    return Image.fromarray(cv_img)

async def handle_photo(update: Update, context):
    try:
        msg = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = await update.message.photo[-1].get_file()
        image_stream = BytesIO()
        await photo.download_to_memory(out=image_stream)
        image_stream.seek(0)
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        enhanced_img = enhance_image(image_stream)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_stream = BytesIO()
        enhanced_img.save(result_stream, format='JPEG', quality=95)
        result_stream.seek(0)
        
        await update.message.reply_photo(
            photo=result_stream,
            caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
        )
        await msg.delete()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == "__main__":
    main()
