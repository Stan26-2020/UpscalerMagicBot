import os
import asyncio
import uuid
import logging
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import aiohttp
from aiohttp import FormData, ClientTimeout

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

API_URL = os.getenv("API_URL", "")
WEBHOOK_MODE = os.getenv("WEBHOOK_MODE", "false").lower() == "true"
SECRET_TOKEN = os.getenv("SECRET_TOKEN", "")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MODES = ["upscale", "face_restore", "illustration", "poster"]
WORKER_COUNT = int(os.getenv("WORKER_COUNT", 3))
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
API_TIMEOUT = 30  # seconds

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
queue = asyncio.Queue()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        mode = context.args[0] if context.args else "upscale"
        if mode not in MODES:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n" + 
                "\n".join(f"/mode {m}" for m in MODES)
            )
            return
        
        context.user_data["mode"] = mode
        await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}")
    except Exception as e:
        logger.error(f"Error in set_mode: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å:\n"
        f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {queue.qsize()} –∑–∞–¥–∞—á\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {context.user_data.get('mode', 'upscale')}"
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        if photo.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10MB)")
            return

        mode = context.user_data.get("mode", "upscale")
        logger.info(f"New photo received in {mode} mode")
        
        await update.message.reply_text(f"üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –†–µ–∂–∏–º: {mode}")
        await queue.put((update, context))
    except Exception as e:
        logger.error(f"Error in handle_photo: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# --- Worker-—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ ---
async def worker(worker_id: int):
    logger.info(f"Worker {worker_id} started")
    async with aiohttp.ClientSession(timeout=ClientTimeout(total=API_TIMEOUT)) as session:
        while True:
            try:
                update, context = await queue.get()
                filename = f"temp_{uuid.uuid4().hex}.jpg"
                
                try:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
                    photo = update.message.photo[-1]
                    file = await context.bot.get_file(photo.file_id)
                    await file.download_to_drive(filename)
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                    mode = context.user_data.get("mode", "upscale")
                    form = FormData()
                    form.add_field(
                        "file",
                        open(filename, "rb"),
                        filename=filename,
                        content_type="image/jpeg"
                    )
                    
                    await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ API
                    if not API_URL:
                        raise ValueError("API_URL –Ω–µ –∑–∞–¥–∞–Ω")
                        
                    async with session.post(
                        f"{API_URL}/{mode}",
                        data=form
                    ) as response:
                        if response.status == 200:
                            result = await response.read()
                            await update.message.reply_photo(result)
                            logger.info(f"Worker {worker_id}: Image processed successfully")
                        else:
                            error = await response.text()
                            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API: {error}")
                            logger.error(f"API error: {error}")
                            
                except asyncio.TimeoutError:
                    await update.message.reply_text("‚åõ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    logger.warning(f"Worker {worker_id}: Timeout occurred")
                    
                except Exception as e:
                    await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
                    logger.error(f"Worker {worker_id} error: {e}")
                    
                finally:
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    try:
                        if os.path.exists(filename):
                            os.remove(filename)
                    except:
                        pass
                    
                    queue.task_done()
                    
            except Exception as e:
                logger.critical(f"Worker {worker_id} crashed: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def setup_application():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("mode", set_mode))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    return app

def run_workers():
    """–ó–∞–ø—É—Å–∫ worker'–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    for i in range(WORKER_COUNT):
        asyncio.create_task(worker(i))
    return loop

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    worker_loop = run_workers()
    app = setup_application()
    
    try:
        if WEBHOOK_MODE:
            PORT = int(os.getenv("PORT", 5000))
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url="https://upscalermagicbot.onrender.com",
                secret_token=SECRET_TOKEN
            )
        else:
            app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.critical(f"Application failed: {e}")
    finally:
        worker_loop.close()

if __name__ == "__main__":
    main()
