import os
from io import BytesIO
from PIL import Image
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from realesrgan import RealESRGANer
import cv2
import numpy as np

TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ESRGAN
# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã: 2x, 4x, 8x)
upscaler_2x = RealESRGANer(scale=2, model_path='weights/RealESRGAN_x2plus.pth')
upscaler_4x = RealESRGANer(scale=4)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
upscaler_8x = RealESRGANer(scale=8, model_path='weights/RealESRGAN_x8.pth')

# –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–∞
async def ask_scale(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("2x", callback_data='2x')],
        [InlineKeyboardButton("4x", callback_data='4x')],
        [InlineKeyboardButton("8x", callback_data='8x')]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—à—Ç–∞–±:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_photo(update: Update, context):
    try:
        msg = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç—Ç–æ –∑–∞–π–º–µ—Ç 10-30 —Å–µ–∫)...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = await update.message.photo[-1].get_file()
        image_stream = BytesIO()
        await photo.download_to_memory(out=image_stream)
        image_stream.seek(0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç OpenCV
        pil_img = Image.open(image_stream)
        cv_img = np.array(pil_img)
        cv_img = cv2.cvtColor(cv_img, cv2.COLOR_RGB2BGR)
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å ESRGAN
        output, _ = upscaler.enhance(cv_img)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL Image
        output = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)
        enhanced_img = Image.fromarray(output)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_stream = BytesIO()
        enhanced_img.save(result_stream, format='JPEG', quality=95)
        result_stream.seek(0)
        
        await update.message.reply_photo(
            photo=result_stream,
            caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (4x)"
        )
        await msg.delete()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == "__main__":
    main()
