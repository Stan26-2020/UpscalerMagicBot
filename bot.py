import os
import logging
from io import BytesIO
import httpx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN')
UPSCALE_API_KEY = os.getenv('UPSCALE_API_KEY')
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB

class ImageUpscaler:
    def __init__(self):
        self.client = httpx.AsyncClient(timeout=30.0)

    async def upscale(self, image_bytes: bytes) -> BytesIO:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ API"""
        try:
            response = await self.client.post(
                "https://api.upscale.media/v1/image",
                files={"image": ("photo.jpg", image_bytes)},
                headers={"Authorization": f"Bearer {UPSCALE_API_KEY}"}
            )
            if response.status_code == 200:
                return BytesIO(response.content)
        except Exception as e:
            logger.error(f"API error: {e}")
        return None

async def start(update: Update, context):
    await update.message.reply_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞!\n"
        "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB\n"
        "‚è± –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥"
    )

async def handle_photo(update: Update, context):
    try:
        if update.message.photo[-1].file_size > MAX_FILE_SIZE:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB)")
            return

        msg = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        photo = await update.message.photo[-1].get_file()
        image_bytes = await photo.download_as_bytearray()

        upscaler = ImageUpscaler()
        enhanced = await upscaler.upscale(image_bytes)

        if enhanced:
            await update.message.reply_photo(
                photo=enhanced,
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        await msg.delete()

    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
