import os
import logging
import httpx
from io import BytesIO
from enum import Enum
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
MAX_SIZE = 5 * 1024 * 1024  # 5MB

API_KEYS = {
    'UPSCALE_MEDIA': os.getenv('UPSCALE_API_KEY'),
    'DEEP_IMAGE': os.getenv('DEEP_IMAGE_API_KEY'),
    'LETS_ENHANCE': os.getenv('LETS_ENHANCE_API_KEY')
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING_API, PROCESSING = range(2)


class ApiService(Enum):
    UPSCALE_MEDIA = {
        'name': 'Upscale Media',
        'url': 'https://api.upscale.media/v1/image',
        'headers': lambda key: {"Authorization": f"Bearer {key}"},
        'files_param': "image"
    }
    DEEP_IMAGE = {
        'name': 'Deep Image AI',
        'url': 'https://api.deep-image.ai/process',
        'headers': lambda _: {},
        'files_param': "image",
        'data': {"mode": "quality"}
    }
    LETS_ENHANCE = {
        'name': 'Let's Enhance',
        'url': 'https://api.letsenhance.io/enhance',
        'headers': lambda key: {"Authorization": f"Bearer {key}"},
        'files_param': "image"
    }


class ImageProcessor:
    def __init__(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        self.current_api = None

    async def enhance_image(self, image_bytes: bytes, api_service: ApiService) -> BytesIO | None:
        self.current_api = api_service
        config = api_service.value

        if not API_KEYS.get(api_service.name):
            logger.error(f"No API key for {api_service.name}")
            return None

        try:
            files = {config['files_param']: ("photo.jpg", image_bytes)}
            data = config.get('data', {})

            response = await self.client.post(
                config['url'],
                files=files,
                data=data,
                headers=config['headers'](API_KEYS[api_service.name])
            )

            if response.status_code == 200:
                return BytesIO(response.content)

            logger.error(f"{api_service.name} API error: {response.status_code}")

        except Exception as e:
            logger.error(f"{api_service.name} connection error: {e}")

        return None

    async def close(self):
        await self.client.aclose()


processor = ImageProcessor()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Image Enhancer Bot!\n\n"
        "–Ø –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö API.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG/PNG –¥–æ 5MB.\n\n"
        "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 —Å–µ–∫—É–Ω–¥"
    )
    return CHOOSING_API


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        if photo.file_size > MAX_SIZE:
            await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5MB)")
            return ConversationHandler.END

        context.user_data['photo'] = photo
        context.user_data['photo_file'] = await photo.get_file()

        buttons = [
            [f"{service.value['name']} ({service.name})"] for service in ApiService
            if API_KEYS.get(service.name)
        ]

        if not buttons:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤")
            return ConversationHandler.END

        reply_markup = ReplyKeyboardMarkup(
            buttons, resize_keyboard=True, one_time_keyboard=True
        )

        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:",
            reply_markup=reply_markup
        )

        return PROCESSING

    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return ConversationHandler.END


async def process_with_api(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        choice = update.message.text
        selected_api = None

        for api in ApiService:
            if api.value['name'] in choice:
                selected_api = api
                break

        if not selected_api:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞")
            return ConversationHandler.END

        msg = await update.message.reply_text(
            f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é {selected_api.value['name']}..."
        )

        photo_file = context.user_data['photo_file']
        image_bytes = await photo_file.download_as_bytearray()

        enhanced_image = await processor.enhance_image(image_bytes, selected_api)

        if enhanced_image:
            await update.message.reply_photo(
                photo=enhanced_image,
                caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é {selected_api.value['name']}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é {selected_api.value['name']}"
            )

        await msg.delete()

    except Exception as e:
        logger.error(f"Error in API processing: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    finally:
        context.user_data.clear()
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    context.user_data.clear()
    return ConversationHandler.END


async def main():
    try:
        logger.info("Starting bot...")

        app = Application.builder().token(TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.PHOTO, handle_photo)
            ],
            states={
                CHOOSING_API: [
                    MessageHandler(filters.PHOTO, handle_photo)
                ],
                PROCESSING: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_with_api)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        app.add_handler(conv_handler)

        logger.info("Bot is running...")
        await app.run_polling()

    except Exception as e:
        logger.critical(f"Bot failed: {e}")
    finally:
        await processor.close()


if __name__ == "__main__":
    asyncio.run(main())
